import re
import time
from g4f.client import Client
import google.generativeai as genai
from datetime import datetime


class ImageGenerator:
    def __init__(self, gemini_api_key=None):
        """
        Kh·ªüi t·∫°o ImageGenerator v·ªõi AI ph√¢n t√≠ch v√† enhance prompt
        """
        self.client = Client()
        
        # Kh·ªüi t·∫°o Gemini ƒë·ªÉ enhance prompt
        if gemini_api_key:
            genai.configure(api_key=gemini_api_key)
            self.gemini_model = genai.GenerativeModel('gemini-2.0-flash')
        else:
            self.gemini_model = None
            
        # T·ª´ kh√≥a trigger t·∫°o ·∫£nh (ti·∫øng Vi·ªát)
        self.image_triggers_vi = [
            't·∫°o ·∫£nh', 't·∫°o h√¨nh', 'v·∫Ω', 'v·∫Ω cho', 'l√†m ·∫£nh', 'sinh ·∫£nh',
            't·∫°o ra ·∫£nh', 'generate image', 'make image', 'create image',
            'draw', 'sketch', 'paint', 'design', 't·∫°o h√¨nh ·∫£nh',
            '·∫£nh', 'h√¨nh', 'picture', 'image', 'photo', 'pic'
        ]
        
        # T·ª´ kh√≥a m√¥ t·∫£ c·∫ßn t·∫°o ·∫£nh
        self.description_patterns = [
            r't·∫°o ·∫£nh (.+)',
            r'v·∫Ω (.+)',
            r'l√†m ·∫£nh (.+)',
            r'·∫£nh (.+)',
            r'h√¨nh (.+)',
            r'generate (.+)',
            r'create (.+)',
            r'draw (.+)',
            r'make (.+)',
        ]
        
        # Statistics
        self.stats = {
            'total_requests': 0,
            'successful_generations': 0,
            'failed_generations': 0,
            'start_time': datetime.now()
        }
        
        print("[IMAGE] ‚úÖ ImageGenerator ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")

    def is_image_request(self, message):
        """
        Ph√¢n t√≠ch tin nh·∫Øn xem c√≥ ph·∫£i y√™u c·∫ßu t·∫°o ·∫£nh kh√¥ng
        Logic c·ª±c k·ª≥ m·∫°nh v·ªõi multiple checks
        """
        message_lower = message.lower().strip()
        
        # Check 1: Ch·ª©a t·ª´ kh√≥a trigger tr·ª±c ti·∫øp
        for trigger in self.image_triggers_vi:
            if trigger in message_lower:
                print(f"[IMAGE] üîç Trigger detected: '{trigger}'")
                return True
        
        # Check 2: Pattern matching v·ªõi regex
        for pattern in self.description_patterns:
            if re.search(pattern, message_lower):
                print(f"[IMAGE] üîç Pattern matched: '{pattern}'")
                return True
        
        # Check 3: AI-powered intent detection (n·∫øu c√≥ Gemini)
        if self.gemini_model and len(message) > 10:
            try:
                intent_prompt = f"""
                Ph√¢n t√≠ch tin nh·∫Øn n√†y xem ng∆∞·ªùi d√πng c√≥ mu·ªën t·∫°o ·∫£nh/h√¨nh kh√¥ng?
                Tin nh·∫Øn: "{message}"
                
                Tr·∫£ l·ªùi ch·ªâ: YES ho·∫∑c NO
                """
                response = self.gemini_model.generate_content(intent_prompt)
                ai_decision = response.text.strip().upper()
                
                if "YES" in ai_decision:
                    print(f"[IMAGE] ü§ñ AI detected image intent")
                    return True
                    
            except Exception as e:
                print(f"[IMAGE] ‚ö†Ô∏è AI intent detection failed: {str(e)}")
        
        # Check 4: Context-based detection (c√¢u h·ªèi v·ªÅ h√¨nh ·∫£nh)
        context_keywords = ['nh∆∞ th·∫ø n√†o', 'tr√¥ng ra sao', 'h√¨nh d√°ng', 'm√†u s·∫Øc', 'thi·∫øt k·∫ø']
        if any(keyword in message_lower for keyword in context_keywords):
            if any(visual in message_lower for visual in ['·∫£nh', 'h√¨nh', 'nh√¨n', 'th·∫•y']):
                print(f"[IMAGE] üîç Context-based detection")
                return True
        
        return False

    def extract_description(self, message):
        """
        Tr√≠ch xu·∫•t m√¥ t·∫£ t·ª´ tin nh·∫Øn ƒë·ªÉ t·∫°o ·∫£nh
        """
        message_clean = message.strip()
        
        # Th·ª≠ extract b·∫±ng pattern matching
        for pattern in self.description_patterns:
            match = re.search(pattern, message.lower())
            if match:
                description = match.group(1).strip()
                if description:
                    print(f"[IMAGE] üìù Extracted: '{description}'")
                    return description
        
        # N·∫øu kh√¥ng match pattern, lo·∫°i b·ªè trigger words v√† l·∫•y ph·∫ßn c√≤n l·∫°i
        message_lower = message.lower()
        for trigger in self.image_triggers_vi:
            if trigger in message_lower:
                # T√¨m v·ªã tr√≠ trigger v√† l·∫•y ph·∫ßn sau
                start_idx = message_lower.find(trigger)
                if start_idx != -1:
                    description = message[start_idx + len(trigger):].strip()
                    # Lo·∫°i b·ªè c√°c t·ª´ li√™n k·∫øt
                    description = re.sub(r'^(c·ªßa|cho|v·ªÅ|m·ªôt|c√°i|chi·∫øc)\s+', '', description)
                    if description:
                        print(f"[IMAGE] üìù Extracted after trigger: '{description}'")
                        return description
        
        # Fallback: tr·∫£ v·ªÅ to√†n b·ªô tin nh·∫Øn
        print(f"[IMAGE] üìù Using full message: '{message}'")
        return message

    def enhance_prompt(self, description):
        """
        Enhance prompt ƒë·ªÉ t·∫°o ·∫£nh ch·∫•t l∆∞·ª£ng cao
        Chuy·ªÉn ti·∫øng Vi·ªát sang ti·∫øng Anh v√† th√™m detail
        """
        try:
            if self.gemini_model:
                enhance_prompt = f"""
                Enhance prompt n√†y ƒë·ªÉ t·∫°o ·∫£nh AI ch·∫•t l∆∞·ª£ng cao:
                Input: "{description}"
                
                Y√™u c·∫ßu:
                1. Chuy·ªÉn sang ti·∫øng Anh n·∫øu l√† ti·∫øng Vi·ªát
                2. Th√™m chi ti·∫øt v·ªÅ style, lighting, quality
                3. T·ªëi ∆∞u cho AI art generation
                4. Ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
                5. Professional prompt format
                
                Ch·ªâ tr·∫£ v·ªÅ enhanced prompt, kh√¥ng gi·∫£i th√≠ch:
                """
                
                response = self.gemini_model.generate_content(enhance_prompt)
                enhanced = response.text.strip()
                
                # Clean up response
                enhanced = re.sub(r'^["\'`]|["\'`]$', '', enhanced)  # Remove quotes
                enhanced = enhanced.replace('\n', ' ').strip()
                
                print(f"[IMAGE] ‚ú® Enhanced: '{enhanced}'")
                return enhanced
                
            else:
                # Fallback enhancement without AI
                enhanced = self.basic_enhance(description)
                print(f"[IMAGE] ‚ú® Basic enhanced: '{enhanced}'")
                return enhanced
                
        except Exception as e:
            print(f"[IMAGE] ‚ö†Ô∏è Enhancement failed: {str(e)}")
            return self.basic_enhance(description)

    def basic_enhance(self, description):
        """
        Basic prompt enhancement without AI
        """
        # Translate common Vietnamese terms
        vi_to_en = {
            'm√®o': 'cat', 'ch√≥': 'dog', 'ng∆∞·ªùi': 'person', 'c√¥ g√°i': 'girl',
            'ch√†ng trai': 'boy', 'phong c·∫£nh': 'landscape', 'th√†nh ph·ªë': 'city',
            'bi·ªÉn': 'ocean', 'n√∫i': 'mountain', 'hoa': 'flower', 'c√¢y': 'tree',
            '√¥ t√¥': 'car', 'nh√†': 'house', 'ƒë·∫πp': 'beautiful', 'xinh': 'pretty',
            'l·ªõn': 'big', 'nh·ªè': 'small', 'ƒë·ªè': 'red', 'xanh': 'blue',
            'v√†ng': 'yellow', 'tr·∫Øng': 'white', 'ƒëen': 'black'
        }
        
        enhanced = description.lower()
        for vi, en in vi_to_en.items():
            enhanced = enhanced.replace(vi, en)
        
        # Add quality modifiers
        if 'high quality' not in enhanced and '4k' not in enhanced:
            enhanced += ', high quality, detailed, professional'
            
        return enhanced

    def generate_image(self, description):
        """
        Generate image t·ª´ description v·ªõi error handling
        """
        try:
            self.stats['total_requests'] += 1
            print(f"[IMAGE] üé® ƒêang t·∫°o ·∫£nh v·ªõi prompt: '{description}'")
            
            # Enhance prompt tr∆∞·ªõc khi t·∫°o
            enhanced_prompt = self.enhance_prompt(description)
            
            # Generate image v·ªõi g4f
            response = self.client.images.generate(
                model="flux",
                prompt=enhanced_prompt,
                response_format="url"
            )
            
            if response and response.data and len(response.data) > 0:
                image_url = response.data[0].url
                self.stats['successful_generations'] += 1
                print(f"[IMAGE] ‚úÖ T·∫°o ·∫£nh th√†nh c√¥ng: {image_url}")
                return {
                    'success': True,
                    'url': image_url,
                    'original_prompt': description,
                    'enhanced_prompt': enhanced_prompt
                }
            else:
                raise Exception("No image data returned")
                
        except Exception as e:
            self.stats['failed_generations'] += 1
            print(f"[IMAGE] ‚ùå L·ªói t·∫°o ·∫£nh: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'original_prompt': description
            }

    def get_image_response_text(self, result, user_name="b·∫°n"):
        """
        T·∫°o text response ph√π h·ª£p v·ªõi k·∫øt qu·∫£ t·∫°o ·∫£nh
        """
        if result['success']:
            responses = [
                f"ƒë√¢y n√® {user_name}, tui v·ª´a t·∫°o ·∫£nh xong :))",
                f"·∫£nh c·ªßa {user_name} ƒë√¢y, check th·ª≠ nh√© :vv",
                f"t·∫°o xong r·ªìi {user_name}, hy v·ªçng {user_name} th√≠ch :))",
                f"done ·∫£nh r·ªìi n√®, {user_name} xem sao :D",
                f"fresh ·∫£nh m·ªõi toanh cho {user_name} :))"
            ]
            import random
            return random.choice(responses)
        else:
            error_responses = [
                f"sorry {user_name}, t·∫°o ·∫£nh b·ªã l·ªói r·ªìi :(((",
                f"√¥i kh√¥ng, t·∫°o ·∫£nh failed r·ªìi {user_name} :((", 
                f"h·ª•t, l·ªói t·∫°o ·∫£nh r·ªìi {user_name} :vv",
                f"t·∫°o ·∫£nh kh√¥ng ƒë∆∞·ª£c {user_name} ∆°i, th·ª≠ l·∫°i nh√© :(("
            ]
            import random
            return random.choice(error_responses)

    def get_stats(self):
        """
        L·∫•y th·ªëng k√™ image generation
        """
        uptime = (datetime.now() - self.stats['start_time']).total_seconds() / 60
        return {
            'total_requests': self.stats['total_requests'],
            'successful_generations': self.stats['successful_generations'],
            'failed_generations': self.stats['failed_generations'],
            'success_rate': (self.stats['successful_generations'] / max(1, self.stats['total_requests'])) * 100,
            'uptime_minutes': uptime
        }

    def is_processing_image(self):
        """
        Ki·ªÉm tra xem c√≥ ƒëang process image kh√¥ng
        ƒê·ªÉ block tin nh·∫Øn kh√°c trong l√∫c t·∫°o ·∫£nh
        """
        # C√≥ th·ªÉ implement logic ph·ª©c t·∫°p h∆°n n·∫øu c·∫ßn
        return False


# Test function
def test_image_generator():
    """
    Test ImageGenerator functionality
    """
    print("[TEST] üß™ Testing ImageGenerator...")
    
    try:
        # Kh·ªüi t·∫°o generator (c·∫ßn API key th·∫≠t ƒë·ªÉ test enhancement)
        generator = ImageGenerator()
        
        test_messages = [
            "t·∫°o ·∫£nh con m√®o",
            "v·∫Ω phong c·∫£nh ƒë·∫πp",
            "l√†m ·∫£nh m·ªôt c√¥ g√°i xinh",
            "generate a beautiful sunset",
            "hello how are you",  # Kh√¥ng ph·∫£i image request
            "·∫£nh c·ªßa m·ªôt chi·∫øc √¥ t√¥ ƒë·ªè"
        ]
        
        for msg in test_messages:
            print(f"\n[TEST] Testing: '{msg}'")
            is_request = generator.is_image_request(msg)
            print(f"[TEST] Is image request: {is_request}")
            
            if is_request:
                description = generator.extract_description(msg)
                print(f"[TEST] Description: '{description}'")
                
                enhanced = generator.basic_enhance(description)
                print(f"[TEST] Enhanced: '{enhanced}'")
        
        # Stats
        stats = generator.get_stats()
        print(f"\n[TEST] Stats: {stats}")
        
    except Exception as e:
        print(f"[TEST] ‚ùå Error: {str(e)}")


if __name__ == "__main__":
    test_image_generator() 